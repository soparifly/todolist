{"version":3,"sources":["comps/Header.jsx","comps/Footer.jsx","comps/RemBody.jsx","comps/RemList.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Footer","RemBody","headArray","RemList","rem_header","useCallback","map","text","UUID","useState","rememberList","setRememberList","fetchCallback","remString","localStorage","console","log","remJSON","JSON","parse","useEffect","length","sort","pre","next","r_comp","stringify","trOnClick","e","td","target","tagName","uuid","closest","dataset","_list","remember","r_id","list_body","data-uuid","onDoubleClick","r_date","r_time","r_remember","colSpan","onKeyDown","keyCode","value","moment","format","name","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAWeA,MATf,WACE,OACE,wBAAQC,UAAU,aAAlB,SACE,+BACE,iDADF,IAC6B,2ECIpBC,MARf,WACE,OACE,iCACE,yECSSC,MARf,WACE,OACE,yBAASF,UAAU,eAAnB,SACE,cAAC,EAAD,O,sDCJAG,EAAY,CAAC,OAAQ,OAAQ,QAuKpBC,MA7Jf,WACE,IAAMC,EAAaC,uBAAY,WAC7B,OAAOH,EAAUI,KAAI,SAACC,GACpB,OAAO,6BAAkBA,GAATC,YAEjB,IALc,EAMuBC,mBAAS,IANhC,mBAMVC,EANU,KAMIC,EANJ,KA4BXC,EAAgBP,uBAAY,WAChC,IAAMQ,EAAYC,aAAaJ,aAE/B,GAAIG,EAAW,CACbE,QAAQC,IAAI,sBACZ,IAAMC,EAAUC,KAAKC,MAAMN,GAC3BF,EAAgBM,MAEjB,IAOHG,oBAAUR,EAAe,CAACA,IAwC1BQ,qBAtBoB,WAClBL,QAAQC,IAAI,UACRN,EAAaW,OAAS,IACxBX,EAAaY,MAAK,SAACC,EAAKC,GACtB,OAAID,EAAIE,SAAWD,EAAKC,QAAgB,GACnCF,EAAIE,QAAUD,EAAKC,OAAe,OAAvC,KAQFX,aAAaJ,aAAeQ,KAAKQ,UAAUhB,MASxB,CAACA,IACxB,IAAMiB,EAAY,SAACC,GACjB,IAAMC,EAAKD,EAAEE,OACb,GAAmB,OAAfD,EAAGE,QAAkB,CACvB,IAAMC,EAAOH,EAAGI,QAAQ,MAAMC,QAAQF,KAChCG,EAAQzB,EAAaJ,KAAI,SAAC8B,GAC9B,OAAIA,EAASC,OAASL,EACb,2BAAKI,GAAZ,IAAsBX,QAASW,EAASX,SAEnCW,KAGTzB,EAAgB,YAAIwB,MAGlBG,EAAY5B,EAAaJ,KAAI,SAAC8B,GAClC,OACE,qBAEEG,YAAWH,EAASC,KACpBtC,UAAWqC,EAASX,OAAS,OAAS,GACtCe,cAAeb,EAJjB,UAME,6BAAKS,EAASK,SACd,6BAAKL,EAASM,SACd,6BAAKN,EAASO,eAPTP,EAASC,SAgCpB,OACE,qBAAKtC,UAAU,QAAf,SACE,wBAAOA,UAAU,WAAjB,UACE,gCACE,6BAAKK,QAEP,kCACGkC,EACD,+BACE,oBAAIM,QAAQ,IAAZ,mBACA,6BACE,uBACEC,UAjCI,SAACjB,GACjB,GAAkB,KAAdA,EAAEkB,QAAgB,CAAC,IACbC,EAAUnB,EAAEE,OAAZiB,MACFX,EAAW,CACfC,KAAM7B,MACNiC,OAAQO,MAASC,OAAO,kBACxBP,OAAQM,MAASC,OAAO,YACxBN,WAAYI,EACZtB,QAAQ,GAEVd,EAAgB,GAAD,mBAAKD,GAAL,CAAmB0B,KAClCR,EAAEE,OAAOiB,MAAQ,KAuBPG,KAAK,aACLC,YAAY,qCCzIbC,MAVf,WACE,OACE,sBAAKrD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCRSsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.df736b78.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"App-header\">\n      <h1>\n        <span>Remember List</span> <span> (˵⚈ε⚈˵)</span>\n      </h1>\n    </header>\n  );\n}\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <footer>\n      <address> copy Right kimbyulook@naver.cm</address>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\n// 상대경로인 index\n// 아니면 ./comps\n// import { RemList } from \"./index\";\nimport { RemList } from \"../comps\";\n\nfunction RemBody() {\n  return (\n    <section className=\"main_section\">\n      <RemList />\n    </section>\n  );\n}\n\nexport default RemBody;\n","import React from \"react\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport moment from \"moment\";\nimport UUID from \"react-uuid\";\n\nconst headArray = [\"DATE\", \"TIME\", \"TODO\"];\n\nconst rememberSampleData = {\n  r_id: \"0001\",\n  r_date: \"2021-09-08\",\n  r_time: \"10:10:10\",\n  r_remember: \"나의 리멤버 리스트\",\n  r_comp: false, //완료 여부\n};\n\nfunction RemList() {\n  const rem_header = useCallback(() => {\n    return headArray.map((text) => {\n      return <th key={UUID()}>{text}</th>;\n    });\n  }, []);\n  const [rememberList, setRememberList] = useState([]);\n  /**\n   * 로컬스토리지에 리멤버리스트를 파서로 변환하고\n   * setRememberList를 통해 JSON을 가져와서 화면에 보여줌\n   * 화면이 새로나타날때마다 해당 함수를 계속 소환하기 때문에 문법상의\n   * 문제가 없지만\n   * 문제개선이 필요함\n   * 그래서 useCallback을 사용한다\n   */\n  /**\n   * useEffect가 실행(호출할)함수를 선언하였다\n   * 이함수는 화면이 rendering 될때 한번만 호출될 함수\n   * 하지만 react에 의해서 현재 화면이 보여지는 상태가 되면\n   * 이 함수를 계속해서 다시생성한다\n   * 현재의 컴퓨터 성능으로는 큰문제가 없지만\n   * 이러한 과정이 계속해서 반복된다면 메모리등에 문제를 일으킬 수 있다\n   *\n   * react16에서는 이러한 함수를 useCallback()으로 감싸도록 권장하고있다\n   * useCallback()으로 감싸진 함수는 이전에 한번이라도 만들어진 경우는 그대로 재사용하고 없는경우에만 함수를 생성한다\n   *\n   */\n  //   const fetchData = () => {\n  const fetchCallback = useCallback(() => {\n    const remString = localStorage.rememberList;\n\n    if (remString) {\n      console.log(\"Fetch rememberList\");\n      const remJSON = JSON.parse(remString);\n      setRememberList(remJSON);\n    }\n  }, []);\n\n  // const fetchCallback = useCallback(fetchData, []);\n  // 현재 상태에 데이터가 없을때는 최초의 1회만 실행함\n  // 최초에 rendering될때 (app이 시작될때, page가 열릴때, 새록고침할때)\n  // fetchData를 실행함,\n  //   useEffect(fetchCallback, [fetchData]);\n  useEffect(fetchCallback, [fetchCallback]);\n\n  /**\n   * 객체 배열 sort하기\n   * 배열.sort(compareFuction(p,n))\n   * pre와 next에 번갈하면서 요소가 담긴다,\n   * 두가지를 이용해서\n   * 완료가되면    1을\n   * 미완료일경우 -1을 return 한다\n   *\n   * compareFunction의 return 값에 따라서 배열의 위치가 교환된다\n   * 만약에 return 값이 return 0보다 크냐 작냐에따라 next 앞으로 pre 뒤로\n   * 이동시킨다\n   *\n   * map(), filter()는 결과를 return 하여 다른 배열을 생성한다\n   * sort()는 자기자신을 변경한다\n   *\n   */\n  const saveStorage = () => {\n    console.log(\"EFFECT\");\n    if (rememberList.length > 0) {\n      rememberList.sort((pre, next) => {\n        if (pre.r_comp && !next.r_comp) return -1;\n        if (!pre.r_comp && next.r_comp) return 1;\n      });\n      // return pre.r_comp\n      //   ? 1\n      //   : pre.r_date > next.r_date && pre.r_time > next.r_time\n      //   ? -1\n      //   : 0;\n\n      localStorage.rememberList = JSON.stringify(rememberList);\n    }\n  };\n\n  //useEffect(함수, 상태대상)\n  // 화면에 rendering이 발생할때 실행되는 public event 연결\n  // 일부러 호출하거나, 실행하지않아도\n  // 어떤 조건이 발생하면 자동으로 호출되어실행되는함수\n  //상태가 없으면 최초의 rendring될때 한번만 함수를 호출한다\n  useEffect(saveStorage, [rememberList]);\n  const trOnClick = (e) => {\n    const td = e.target;\n    if (td.tagName === \"TD\") {\n      const uuid = td.closest(\"TR\").dataset.uuid;\n      const _list = rememberList.map((remember) => {\n        if (remember.r_id === uuid) {\n          return { ...remember, r_comp: !remember.r_comp };\n        }\n        return remember;\n      });\n\n      setRememberList([..._list]);\n    }\n  };\n  const list_body = rememberList.map((remember) => {\n    return (\n      <tr\n        key={remember.r_id}\n        data-uuid={remember.r_id}\n        className={remember.r_comp ? \"comp\" : \"\"}\n        onDoubleClick={trOnClick}\n      >\n        <td>{remember.r_date}</td>\n        <td>{remember.r_time}</td>\n        <td>{remember.r_remember}</td>\n      </tr>\n    );\n  });\n  const onKeyDown = (e) => {\n    if (e.keyCode === 13) {\n      const { value } = e.target;\n      const remember = {\n        r_id: UUID(),\n        r_date: moment().format(\"YYYY[-]MM[-]DD\"),\n        r_time: moment().format(\"HH:mm:ss\"),\n        r_remember: value,\n        r_comp: false,\n      };\n      setRememberList([...rememberList, remember]);\n      e.target.value = \"\";\n    }\n  };\n  /*\n\tconst array = [1, 2, 3, 4, 5]\n\tconst arCopy = [...array];\n\t요소 추가하고 복제하기\n\tconst arCopyAdd = [...array, 9, 10];\n\t*/\n\n  return (\n    <div className=\"tbout\">\n      <table className=\"rem_list\">\n        <thead>\n          <tr>{rem_header()}</tr>\n        </thead>\n        <tbody>\n          {list_body}\n          <tr>\n            <td colSpan=\"2\">TO DO</td>\n            <td>\n              <input\n                onKeyDown={onKeyDown}\n                name=\"r_remember\"\n                placeholder=\"What do you want!?\"\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default RemList;\n","import \"./App.css\";\n\n/* <컴포넌트 import하는 여러가지방법>\nimport Header from \"./comps/header\";\nimport RemBody from \"./comps/RemBody\";\nimport Footer from \"./comps/Footer\";\nimport { Header, RemBody, Footer } from \"./comps/index.jsx\";\nApp.js 는  index의 특징 개별이름을 찾고 그다음에 index를 찾아 importgksek\n./comps 폴더에 index.js(jsx)가 있으면 파일이름을 생략할수 있다\nimport { Header, Footer } from \"./comps\";\nimport { Rembody } from \"./comps\";\n처럼사용할 수있다(팀플할때 좋을듯..) */\n\nimport { Header, RemBody, Footer } from \"./comps\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <RemBody />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}